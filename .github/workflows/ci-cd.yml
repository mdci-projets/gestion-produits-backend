name: CI/CD Pipeline for Spring Boot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      # Nettoyer les fichiers Maven existants (√©viter des conflits)
      - name: Clean Maven settings
        run: rm -rf ~/.m2/settings.xml

      # Configuration s√©curis√©e des param√®tres Maven
      - name: Configure Maven Settings
        run: |
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      # Cache des d√©pendances Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      # Compilation et tests
      - name: Build and Test with Maven
        run: mvn clean verify

      # V√©rifier si le fichier JAR est g√©n√©r√©
      - name: Ensure JAR file is generated
        run: |
          if [ ! -f target/*.jar ]; then
            echo "ERROR: JAR file not found in target/ directory"
            exit 1
          fi

      # Archiver les r√©sultats des tests
      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports

      # Stocker le JAR pour la prochaine √©tape
      - name: Save built JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar

  #  Build and push
  docker-build-and-push:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest         

  deploy-ec2:
    name: Deploy to AWS EC2
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if EC2 Instance Exists
        id: check-ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=spring-boot-ec2" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "INSTANCE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
            echo "INSTANCE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Start or Create EC2 Instance
        if: env.INSTANCE_EXISTS == 'false'
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.AWS_AMI_ID }} \
            --instance-type ${{ secrets.AWS_INSTANCE_TYPE }} \
            --security-group-ids ${{ secrets.AWS_SECURITY_GROUP }} \
            --subnet-id ${{ secrets.AWS_SUBNET_ID }} \
            --key-name ${{ secrets.AWS_KEY_PAIR_NAME }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=spring-boot-ec2}]' \
            --query 'Instances[0].InstanceId' --output text)
          
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Created new EC2 instance: $INSTANCE_ID"

      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Open Port 8080 in Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP }} --protocol tcp --port 8080 --cidr 0.0.0.0/0 || true

      - name: Open Port 22 (SSH) in Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP }} \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0 || true   

      - name: Setup SSH Key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\r$//' > ~/.ssh/aws-key.pem
          chmod 600 ~/.ssh/aws-key.pem

          # üî• V√©rification du bon format de la cl√©
          if ! grep -q "PRIVATE KEY" ~/.ssh/aws-key.pem; then
            echo "ERROR: SSH key is not correctly formatted!"
            exit 1
          fi

          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Wait for EC2 to be Ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 60
          while ! ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws-key.pem ubuntu@$PUBLIC_IP "echo Instance Ready"; do
            echo "Retrying in 10 seconds..."
            sleep 10
          done   

      - name: Deploy Application on EC2
        run: |
          ssh -i ~/.ssh/aws-key.pem ubuntu@${{ env.PUBLIC_IP }} << 'EOF'
            set -e  # üî• Arr√™te le script en cas d'erreur

            # ‚úÖ Mettre √† jour le syst√®me
            sudo apt update -y
            sudo apt upgrade -y

            # ‚úÖ Installer Docker (si non install√©)
            if ! command -v docker &> /dev/null; then
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # ‚úÖ Ajouter l'utilisateur actuel au groupe docker et recharger
            newgrp docker || true

            # ‚úÖ V√©rifier que Docker fonctionne
            docker --version || { echo "ERROR: Docker n'est pas install√© !"; exit 1; }

            # ‚úÖ Se connecter √† Docker Hub
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

            # ‚úÖ D√©ploiement du conteneur
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
            docker stop spring-app || true
            docker rm spring-app || true
            docker run -d --name spring-app -p 8080:8080 -e FRONTEND_URL=${{ secrets.FRONTEND_URL }} ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          EOF
          
  deploy-frontend:
    name: Deploy Frontend to GitHub Pages
    needs: deploy-ec2
    runs-on: ubuntu-latest

    steps:
      - name: üìÇ Cloner le D√©p√¥t du Frontend
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.FRONTEND_REPO }} # üî• D√©p√¥t du frontend
          token: ${{ secrets.DEV_ACCESS_TOKEN }}

      - name: üîë Se Connecter √† AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîç R√©cup√©rer l'IP Publique du Backend (EC2)
        run: |
          BACKEND_URL=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=spring-boot-ec2" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
        
          echo "BACKEND_URL=http://$BACKEND_URL:8080" >> $GITHUB_ENV
          echo "‚úÖ URL du Backend : http://$BACKEND_URL:8080"

      - name: üîÑ Injecter l'URL du Backend dans `config.json`
        run: |
          jq '.productsApiUrl = env.BACKEND_URL' public/assets/config.json > public/assets/config_tmp.json
          mv public/assets/config_tmp.json public/assets/config.json
          echo "‚úÖ URL du Backend inject√©e dans config.json"

      - name: üèóÔ∏è Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Installer les D√©pendances
        run: npm ci

      - name: üèóÔ∏è Construire l'Application Angular
        run: npm run build -- --configuration=production

      - name: üöÄ D√©ployer le Frontend sur GitHub Pages (d√©p√¥t frontend)
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          repository-name: ${{ secrets.FRONTEND_REPO }} # üî• D√©p√¥t du frontend
          branch: gh-pages
          folder: dist/fronted-angular/browser
          token: ${{ secrets.DEV_ACCESS_TOKEN }} # üî• Token pour push sur le d√©p√¥t frontend
          clean: true